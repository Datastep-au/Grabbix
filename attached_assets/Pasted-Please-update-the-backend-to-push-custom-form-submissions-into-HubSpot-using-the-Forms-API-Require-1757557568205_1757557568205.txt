Please update the backend to push custom form submissions into HubSpot using the Forms API.

Requirements

Use the following Replit secrets:

HUBSPOT_PORTAL_ID → HubSpot portal ID

HUBSPOT_FORM_ID_CONTACT → HubSpot form GUID

HUBSPOT_ACCESS_TOKEN → (optional, if HubSpot requires auth; keep support for it)

Create a function submit_to_hubspot(form_data) that:

Builds a JSON payload matching HubSpot’s internal field names:

firstname

email

phone

company

address

type_of_space

potential_customers

message

Sends a POST request to:

https://api.hsforms.com/submissions/v3/integration/submit/{PORTAL_ID}/{FORM_ID}


Headers:

Always Content-Type: application/json

If HUBSPOT_ACCESS_TOKEN exists, include:

Authorization: Bearer {HUBSPOT_ACCESS_TOKEN}


Modify the form submission route so that when the frontend posts data, it calls submit_to_hubspot(form_data) and returns a JSON response with success/failure.

Log any HubSpot API errors (status + response text) to the Replit console for debugging.

Example Python Code (Flask)
import os
import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

def submit_to_hubspot(form_data):
    portal_id = os.environ["HUBSPOT_PORTAL_ID"]
    form_id = os.environ["HUBSPOT_FORM_ID_CONTACT"]
    token = os.environ.get("HUBSPOT_ACCESS_TOKEN")

    url = f"https://api.hsforms.com/submissions/v3/integration/submit/{portal_id}/{form_id}"
    headers = {"Content-Type": "application/json"}

    if token:  # optional token if HubSpot enforces auth
        headers["Authorization"] = f"Bearer {token}"

    payload = {
        "fields": [
            {"name": "firstname", "value": form_data.get("firstname", "")},
            {"name": "email", "value": form_data.get("email", "")},
            {"name": "phone", "value": form_data.get("phone", "")},
            {"name": "company", "value": form_data.get("company", "")},
            {"name": "address", "value": form_data.get("address", "")},
            {"name": "type_of_space", "value": form_data.get("type_of_space", "")},
            {"name": "potential_customers", "value": form_data.get("potential_customers", "")},
            {"name": "message", "value": form_data.get("message", "")}
        ]
    }

    response = requests.post(url, json=payload, headers=headers)
    return response.status_code, response.text

@app.route("/submit", methods=["POST"])
def handle_submit():
    form_data = request.json
    status, result = submit_to_hubspot(form_data)

    if status in [200, 204]:
        return jsonify({"success": True, "message": "Thanks for contacting us!"}), 200
    else:
        print("HubSpot error:", status, result)
        return jsonify({"success": False, "error": "Something went wrong"}), 500

if __name__ == "__main__":
    app.run(debug=True)

Acceptance Criteria

When a lead fills the custom form on my site, their details go straight into HubSpot under the correct HubSpot form.

HubSpot form submission notifications (internal + auto-reply) are triggered.

All secrets are pulled from environment variables, never hardcoded.

API errors are logged for debugging but not shown to the user.